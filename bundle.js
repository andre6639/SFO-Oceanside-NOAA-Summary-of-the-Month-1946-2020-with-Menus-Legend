(function (React$1, ReactDOM, d3, ReactDropdown) {
  'use strict';

  var React$1__default = 'default' in React$1 ? React$1['default'] : React$1;
  ReactDOM = ReactDOM && Object.prototype.hasOwnProperty.call(ReactDOM, 'default') ? ReactDOM['default'] : ReactDOM;
  ReactDropdown = ReactDropdown && Object.prototype.hasOwnProperty.call(ReactDropdown, 'default') ? ReactDropdown['default'] : ReactDropdown;

  const csvUrl =
    'https://gist.githubusercontent.com/andre6639/595f94303ecb60bb21c9fa4c0ddeb7c7/raw/d7bf9554332e6d7207cda1d796f7b66f27bd9473/Bay_Area_NOAA_Summary_of_the_Month_Oceanside&SFO.csv';

  const useData = () => {
    const [data, setData] = React$1.useState(null);

    React$1.useEffect(() => {
      const row = (d) => {
        d.DATE = new Date(d.DATE);
        d.NAME = d.NAME;
        return d;
      };
      d3.csv(csvUrl, row).then(setData);
    }, []);

    return data;
  };

  const AxisBottom = ({ xScale, innerHeight, tickFormat, tickOffset = 3 }) =>
    xScale.ticks().map(tickValue => (
      React.createElement( 'g', {
        className: "tick", key: tickValue, transform: `translate(${xScale(tickValue)},0)` },
        React.createElement( 'line', { y2: innerHeight }),
        React.createElement( 'text', { style: { textAnchor: 'middle' }, dy: ".71em", y: innerHeight + tickOffset },
          tickFormat(tickValue)
        )
      )
    ));

  const AxisLeft = ({ yScale, innerWidth, tickValue, tickOffset = 3 }) =>
    yScale.ticks().map((tickValue) => (
      React.createElement( 'g', { className: "tick", transform: `translate(0,${yScale(tickValue)})` },
        React.createElement( 'line', { x2: innerWidth }),
        React.createElement( 'text', {
          key: tickValue, style: { textAnchor: 'end' }, x: -tickOffset, dy: ".32em" },
          tickValue
        )
      )
    ));

  const Marks = ({
    data,
    xScale,
    yScale,
    xValue,
    yValue,
    colorScale,
    colorValue,
    circleRadius,
    tooltipFormat,
  }) =>
    data.map((d) => (
      React.createElement( 'circle', {
        className: "mark", cx: xScale(xValue(d)), cy: yScale(yValue(d)), fill: colorScale(colorValue(d)), r: circleRadius },
        React.createElement( 'title', null, tooltipFormat(yValue(d)) )
      )
    ));

  // xValue = (d) => d.DATE;

  const ColorLegend = ({
    colorScale,
    tickSpacing = 20,
    tickSize = 10,
    tickTextOffset = 20,
    onHover,
    hoveredValue,
    fadeOpacity
  }) =>
    colorScale.domain().map((domainValue, i) => (
      React.createElement( 'g', {
        className: "tick", transform: `translate(0,${i * tickSpacing})`, onMouseEnter: () => { onHover(domainValue); }, onMouseOut: () => { onHover(null); }, opacity: hoveredValue && domainValue !== hoveredValue ? fadeOpacity : 1 },
        React.createElement( 'circle', { fill: colorScale(domainValue), r: tickSize }),
        React.createElement( 'text', { x: tickTextOffset, dy: ".32em" },
          domainValue
        )
      )
    ));

  const width = 960;
  const height = 500;
  const margin = { top: 20, right: 200, bottom: 88, left: 110 };
  const xAxisLabelOffset = 65;
  const yAxisLabelOffset = 52;
  const fadeOpacity = 0.5;

  const attributes = [
    //  { value: 'AverageWindSpeed', label: 'Average Wind Speed' },
    //  { value: 'PeakGustWindSpeed', label: 'Peak Gust WindSpeed' },
    { value: 'AverageTemperature', label: 'Average Temperature' },
    { value: 'MaximumTemperature', label: 'Maximum Temperature' },
    { value: 'MinimumTemperature', label: 'Minimum Temperature' },
    //  { value: 'ExtremeMaximumTemperatureForThePeriod', label: 'Extreme Maximum Temperature' },
    {
      value: 'ExtremeMinimumTemperatureForThePeriod',
      label: 'Extreme Minimum Temperature',
    },
  ];

  const getLabel = (value) => {
    for (let i = 0; i < attributes.length; i++) {
      if (attributes[i].value === value) {
        return attributes[i].label;
      }
    }
  };

  const App = () => {
    const data = useData();
    const [hoveredValue, setHoveredValue] = React$1.useState(null);
    console.log(hoveredValue);

    const initialYAttribute = 'AverageTemperature';
    const [yAttribute, setYAttribute] = React$1.useState(initialYAttribute);

    if (!data) {
      return React$1__default.createElement( 'pre', null, "Loading..." );
    }

    const innerHeight = height - margin.top - margin.bottom;
    const innerWidth = width - margin.left - margin.right;

    const xValue = (d) => d.DATE;
    const xAxisLabel = '';
    const yValue = (d) => d[yAttribute];
    const yAxisLabel = getLabel(yAttribute);
    
    const colorValue = (d) => d.NAME;
    const colorLegendLabel = 'Station';
    
    const filteredData = data.filter((d) => hoveredValue === colorValue(d));
    
    const circleRadius = 7;
    
    const siFormat = d3.format('.2s');
    const xAxisTickFormat = d3.timeFormat('%Y');
    const yAxisTickFormat = d3.format(' ');

    const legendSize = 15;
    
    console.log(data);

    const xScale = d3.scaleTime()
      .domain(d3.extent(data, xValue))
      .range([0, innerWidth])
      .nice();

    const yScale = d3.scaleLinear()
      .domain(d3.extent(data, yValue))
      .range([innerHeight, 0])
      .nice();
    
    const colorScale = d3.scaleOrdinal()
      .domain(data.map(colorValue))
      .range(['#E6842A', '#137B80']);

    
    return (
      React$1__default.createElement( React$1__default.Fragment, null,
        React$1__default.createElement( 'div', { className: "menus-container" },
          React$1__default.createElement( ReactDropdown, {
            options: attributes, id: "y-select", value: yAttribute, onChange: ({ value }) => setYAttribute(value) })
        ),
        React$1__default.createElement( 'svg', { width: width, height: height },
          React$1__default.createElement( 'g', { transform: `translate(${margin.left},${margin.top})` },
            React$1__default.createElement( AxisBottom, {
              xScale: xScale, innerHeight: innerHeight, tickFormat: xAxisTickFormat, tickOffset: 7 }),
            React$1__default.createElement( 'text', {
              className: "axis-label", textAnchor: "middle", transform: `translate(${-yAxisLabelOffset}, 
          ${innerHeight / 2}) rotate(-90)` },
              yAxisLabel
            ),
            React$1__default.createElement( AxisLeft, { yScale: yScale, innerWidth: innerWidth, tickOffset: 7 }),
            React$1__default.createElement( 'text', {
              className: "axis-label", x: innerWidth / 2, y: innerHeight + xAxisLabelOffset, textAnchor: "middle" },
              xAxisLabel
            ),
            React$1__default.createElement( 'g', { transform: `translate(${innerWidth + 40}, 60)`, 'font-size': legendSize },
            React$1__default.createElement( 'text', { x: 35, y: -25, className: "axis-label", textAnchor: "middle" },
              colorLegendLabel
            ),
            React$1__default.createElement( 'g', null,
              React$1__default.createElement( ColorLegend, {
                tickSpacing: 25, tickSize: 10, tickTextOffset: 20, tickSize: circleRadius, colorScale: colorScale, onHover: setHoveredValue, hoveredValue: hoveredValue, fadeOpacity: fadeOpacity })
            ),
            React$1__default.createElement( ColorLegend, {
              tickSpacing: 25, tickSize: 10, tickTextOffset: 20, tickSize: circleRadius, colorScale: colorScale, onHover: setHoveredValue })
          ),
          React$1__default.createElement( 'g', { opacity: hoveredValue ? fadeOpacity : 1 },
            React$1__default.createElement( Marks, {
              data: data, xScale: xScale, yScale: yScale, xValue: xValue, yValue: yValue, colorScale: colorScale, colorValue: colorValue, tooltipFormat: yAxisTickFormat, circleRadius: circleRadius })
          ),
            React$1__default.createElement( Marks, {
              data: filteredData, xScale: xScale, yScale: yScale, xValue: xValue, yValue: yValue, colorScale: colorScale, colorValue: colorValue, tooltipFormat: yAxisTickFormat, circleRadius: circleRadius })
          )
        )
      )
    );
  };
  const rootElement = document.getElementById('root');
  ReactDOM.render(React$1__default.createElement( App, null ), rootElement);

  // for doing arcs
  //(data).map((d, i) => (
  //        <path fill={d['RGB hex value']} d={pieArc({
  //              startAngle: i / data.length * 2 * Math.PI,
  //  					  endAngle: (i+1) / data.length * 2 * Math.PI
  //            })}/>

}(React, ReactDOM, d3, ReactDropdown));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,